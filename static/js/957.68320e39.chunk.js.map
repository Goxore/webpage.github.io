{"version":3,"file":"static/js/957.68320e39.chunk.js","mappings":"uLAIIA,EAAW,CAAC,4qHAAD,8CAyHf,SAASC,EAAWC,GAGhB,OAAOF,EAAS","sources":["articles.js"],"sourcesContent":["import {type} from '@testing-library/user-event/dist/type';\nimport ReactMarkdown from 'react-markdown';\n\n\nlet articles = [\n`\n# Why i learned vim in year 2021 / review for beginners \n\n## Personal Expirience\n\n### First Vim encounter\n\nIn early September 2021 i decided to change my workflow a bit,\nand by that i mean ditching windows and trying out other operating system.\nAnd just like any other tech-savy person transitioning to GNU/Linux would do,\nI quickly stambled upon this light-weight CLI text editor.\n\nAlso just like any other person first trying out vim, i did not manage to\nexit at the first time, and had to kill the terminal.\n\nAt first I did not understand why people even bother learning something that out of\nthe box looks very unappealing, and needs you to know dozens of keybindings just to\noperate on a basic level.\n\nWhith That in mind, I had to know why many programmers and professional editors\nall over the world prefer this beast, and spoiler, was not disappointed.\n\n## What is Vim\n\n### Vim for beginners\n\nVim is a great and highly-customizable tool, that will not only speed you up\nto unbelivable levels after you learn some of it, but also will make your expirience\nfun!\n\nAlthough this is true that you won't become pro vim user in a day or a week, \nlearning vim is actually not that hard as it seems! Most of the keybindings\nstand for English words.\n\nFor example: \n\nd - delete\n\na - append\n\ni -insert\n\nc - change\n\nf - find \n\ny - yank (copy)\n\np - paste\n\nw - word\n\nb - back\n\nYou can not only use those keybindings on their own, but also combine them\nto form new ones\n\nFor example: \n\ndw - delete word\n\ndi( - delete in ()\n\nyw - yank word\n\nYou might have noticed that i havent used any <Ctrl> or <Shift> keys\nthroughout the article, and that's because Vim is actually a modal text editor.\nIt means that it uses different modes, that determine what your keys will do.\nVim has quite a few different modes, but for beginners i reccomend at first concentrating on\nNormal Insert and Visual modes, that are triggered by <Esc>, <i>, <v> keys respectively.\n\n### More about Modes\n\nWhen you first open Vim, you will be put in Normal mode, the one where all of your keys\nwon't be inseted into the text file, but will be used to trigger commands.\nin this mode you can navigate through your file with hjkl or arrow keys.\n\nto enter insert mode press <i> key, and to exit insert mode press <Esc>\n\nWhile being in the Normal mode, you can switch to visual mode with <v> key.\nIt lets you select a portion of text, and then manipulate it with Normal mode keys.\nSelecting the text and pressing <d> will delete(cut) it, <y> will yank(copy) it, \n<:> will let you permorm a command on it.\n\n### key additions\n\nMost Vim keys have a different effect when are used in uppercase. <v> key selects text, but\n<V> key selects whole line, <d> key deletes selection, but <D> key deletes all text to the end of the line,\n<i> key lets you insert text on your cursor position,\nbut <I> key sends your cursor to the beginning of the line\nand activates insert mode.\n\n## Why learn Vim in 2022?\n\nVim might sound like a relic of the past, but it is not less capable than modern text editors.\nIt has been around for decades, so you can easily get documentation on it through your favourite \nsearch engine, ot with :h command right in it.\nWith plugins like emmet, NERDTree and Coc you can make your vim a powerful code editor, \nand by customizing it's config you can optimize workflow with it to your liking.\n\nVim is preffered by many proffesionals in tech industry, so\nyou can spot it's keybindings in all sorts of CLI programs, and it is not going away\nany time soon.\n\nI had a blast learning Vim keybindings, commands and hidden features, and really hope I might\ninspire someone to also do so!\n\n\n`,\n`\n# TEST 2\n\ntest\n\n\nsome more test\n\n`\n];\n\nfunction getArticle(i)\n{\n\n    return articles[0];\n}\n\nexport { getArticle };\n"],"names":["articles","getArticle","i"],"sourceRoot":""}